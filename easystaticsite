#!/usr/bin/env python

import sys
import os
import uuid
import locale
import json
import webbrowser
import sqlite3
import datetime
import codecs
import re

PYTHON_2 = sys.version_info.major == 2

if PYTHON_2:
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
    from urlparse import urlparse, parse_qs
    from urllib import quote_plus
    from cgi import escape

    def esc(string):
        ''' Custom escape function that also escapes single quotes (which Python 3's html.escape() does by default). '''
        return escape(string, quote=True).replace('\'', '&#x27;')
else:
    from http.server import BaseHTTPRequestHandler, HTTPServer
    from urllib.parse import urlparse, parse_qs, quote_plus
    from html import escape as esc

APP_NAME = 'EasyStaticSite'
APP_HOME_PAGE = 'https://github.com/codenhagen/easystaticsite'
CONFIG_FILE = os.path.join(os.path.expanduser('~'), '.{}_config.json'.format(APP_NAME.lower()))
PORT = 6074
CSRF_TOKEN = uuid.uuid4().hex
DOCUMENT_ROOT_FOLDER = 'web'
INTERNAL_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
DEFAULTS = CONFIG = { # Unlike DEFAULTS, CONFIG can get overriden by the user's custom settings.
    'site_folder': os.path.join(os.path.expanduser('~'), APP_NAME.lower()),
    'site_name': 'My Site',
    'num_posts_front_page': 10,
    'archive_link_content': 'Older entries',
    'locale': '',
    'date_format': INTERNAL_DATE_FORMAT[:-3]
}



DEFAULT_TEMPLATE = u'''<!DOCTYPE html>
<html>
    <head>
        <meta name='viewport' content='width=600, initial-scale=1'>
        <meta charset='UTF-8'>

        <style>
            * {
                box-sizing: border-box;
            }
            body {
                margin: 0;
                -webkit-font-smoothing: antialiased;
                font: medium sans-serif;
            }
            footer {
                color: gray;
                text-align: right;
                font-style: italic;
                font-size: small;
            }
            h2 {
                margin: 0;
                border-bottom: 2px solid #f40000;
                font-family: palatino, 'palatino linotype', serif;
            }
            a {
                color: inherit;
                text-decoration: none;
            }
            .nav {
                position: relative;
                min-height: 40px;
                overflow: auto;
                background: #bf0000;
                color: white;
            }
            .site-header {
                position: absolute;
                bottom: 0;
                width: 60%;
                padding: 10px 20px;
            }
            .page-menu {
                float: right;
                width: 40%;
                margin: 0;
                padding: 0;
                list-style: none;
                font-size: small;
            }
            .page-menu li {
                text-align: right;
            }
            .page-menu li a {
                display: block;
                padding: 10px 20px;
            }
            .page-menu li:hover {
                background: #a00000;
            }
            .main-container {
                width: 600px;
                margin: 0 auto;
            }
            .posts {
                margin: 0 0 50px 0;
                padding: 50px 20px 5px 20px;
                border: 1px dotted gray;
                border-top: none;
            }
            .post {
                margin-bottom: 75px;
            }
            .post .date {
                margin-bottom: 20px;
                color: darkgray;
                text-align: right;
                font-size: small;
            }
            .post .body {
                font-family: palatino, 'palatino linotype', serif;
            }
            .post .body a {
                text-decoration: underline;
            }
            .view-more {
                margin-bottom: 50px;
            }
        </style>

        <title>{{ title }}</title>
    </head>



    <body>
        <div class='main-container'>
            <div class='nav'>
                <div class='site-header'>
                    <a href='index.html'>{{ site_name }}</a>
                </div>

                <ul class='page-menu'>{{ page_menu }}</ul>
            </div>

            <div class='posts'>
                {{ post_loop_start }}
                    <div id='post-{{ post_id }}' class='post'>
                        <h2><a href='{{ post_url }}'>{{ post_title }}</a></h2>

                        <div class='date'>{{ post_date }}</div>

                        <div class='body'>{{ post_body }}</div>
                    </div>
                {{ post_loop_end }}

                {{ archive_link }}

                <footer><a href='{{ generator_url }}'>{{ generator_name }}</a></footer>
            </div>
        </div>
    </body>
</html>'''



# The following HTML/CSS/JS files are all used in the admin section:

LAYOUT_HTML = u'''<!DOCTYPE html>
<html>
    <head>
        <meta charset='UTF-8'>
        <link rel='stylesheet' href='/main.css'>
        <title>{title}</title>
    </head>

    <body>
        <div class='main-container'>
            <div class='nav'>
                <ul class='menu'>
                    <li><a href='/'>Posts and pages</a></li>
                    <li><a href='/menu'>Menu</a></li>
                    <li><a href='/settings'>Settings</a></li>
                    <li><a href='/site_export.json' target='_blank'>Export</a></li>
                    <li><a href='javascript:viewPost();'>View site</a></li>
                </ul>
            </div>
            <div class='main'>
                {message}
                {main_block}
            </div>
            <footer>
                <a href='{home_page}'>{title}</a>
            </footer>
        </div>
        <script src='/main.js'></script>
    </body>
</html>'''



INDEX_HTML = u'''<form id='post-selection-form' method='get'>
    <div class='form-part'>
        <p>Currently editing:</p>
        <select id='select-post-id' name='post_id'>
            <optgroup label='Pages'>
                <option value='new_page'{new_page_selected}>-- New page --</option>
                {page_list}
            </optgroup>
            <optgroup label='Posts'>
                <option value='new_post'{new_post_selected}>-- New post --</option>
                {post_list}
            </optgroup>
        </select>
        <p>{view_link}</p>
    </div>
</form>

<div class='edit-post'>
    <form id='post-editing-form' action='/edit-post' method='post'>
            <div class='form-part'>
                <input type='text' id='edit-title' name='title' value='{title_value}' placeholder='Title' required>
            </div>
            <div class='form-part'>
                <input type='text' id='edit-slug' name='slug' value='{slug_value}' placeholder='Slug' required pattern='[a-zA-Z0-9._-]+'>
            </div>
            <div class='form-part'>
                <!-- Browser support for HTML5's date and time inputs is currently bad, so we'll use text instead. -->
                <input type='text' name='date' value='{date_value}' placeholder='Date and time, e.g. "2015-11-26 14:08:30". Leave empty to use submission date/time'>
            </div>
            <div class='form-part'>
                <ul class='toolbar input-mode'>
                    <li id='toolbar-wysiwyg' class='active'>Visual</li>
                    <li id='toolbar-html'>HTML</li>
                </ul>
                <ul id='wysiwyg-toolbar' class='toolbar wysiwyg-toolbar'>
                    <li class='activate' data-tag='b'>Bold</li>
                    <li class='activate' data-tag='i'>Italic</li>
                    <li class='activate' data-tag='a'>Link</li>
                </ul>
                <div id='edit-body-wysiwyg' class='edit-body' contenteditable='true'></div>
                <textarea id='edit-body-html' class='edit-body' name='body'>{body_value}</textarea>
            </div>
            <div class='form-part'>
                <input type='submit' value='Save'>
                <input type='hidden' id='edit-post-id' name='post_id' value='{edit_post_id}'>
                <input type='hidden' name='csrf_token' value='{csrf_token}'>
                <p class='info'>
                    Note that saving the post/page does not publish it. It only saves it to <a href='/settings'>your site folder</a>,
                    and you can then publish the site manually by transferring the files to your server using SCP, Git,
                    or a similar technology.
                </p>
            </div>
    </form>
</div>

<div class='delete-post'>
    <form id='post-deletion-form' action='/delete-post' method='post'>
        <input type='hidden' name='post_id' value='{edit_post_id}'>
        <input type='hidden' name='csrf_token' value='{csrf_token}'>
        <input type='submit' value='Delete'{disabled}>
    </form>
</div>

<script>var slugsOtherPosts = {slugsOtherPosts}</script>
<script src='/edit_post.js'></script>'''



MENU_HTML = u'''<h1>Page menu</h1>

<ul id='menu-items'></ul>

<form action='/edit-menu' method='post'>
    <input id='menu-item-order' type='hidden' name='menu_item_order'>
    <input id='visible-menu-items' type='hidden' name='visible_menu_items'>
    <input type='hidden' name='csrf_token' value='{csrf_token}'>
    <input id='save-new-menu' type='submit' value='Save'>
</form>

<script src='/edit_menu.js'></script>'''



SETTINGS_HTML = u'''<h1>Settings</h1>

<div class='settings'>
    <form action='/edit-settings' method='post'>
        <div class='form-part'>
            <label>Site folder</label>
            <div class='info'>
                Use a full path, e.g. "/Users/me/my_site". Note that changing this does not move the folder
                in the file system; you will have to do that manually. <b>Please move the folder before saving
                the new settings.</b>
            </div>
            <input type='text' name='site_folder' value='{site_folder_value}' required>
        </div>
        <div class='form-part'>
            <label>Site name</label>
            <div class='info'>
                This will be used various places in the template.
            </div>
            <input type='text' name='site_name' value='{site_name_value}' required>
        </div>
        <div class='form-part'>
            <label>Number of posts on the front page</label>
            <div class='info'>
                Older posts will appear in an archive file.
            </div>
            <input type='number' min='1' name='num_posts_front_page' value='{num_posts_front_page}'>
        </div>
        <div class='form-part'>
            <label>Archive link HTML</label>
            <div class='info'>
                This HTML will be displayed in the front page link that leads to the post archive. The archive link will
                only be shown if there are more posts than can be displayed on the front page.
            </div>
            <input type='text' name='archive_link_content' value='{archive_link_content_value}' required>
        </div>
        <div class='form-part'>
            <label>Date locale</label>
            <div class='info'>
                To be used in conjunction with the date format below.
            </div>
            <select name='locale'>
                <option value=''>[Default]</option>
                {locale_list}
            </select>
        </div>
        <div class='form-part'>
            <label>Date format</label>
            <div class='info'>
                For info about how to format dates, please see the
                <a href='https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior'>strftime() documentation</a>.
            </div>
            <input type='text' name='date_format' value='{date_format_value}' required>
        </div>
        <div>
            <input type='hidden' name='csrf_token' value='{csrf_token}'>
            <input type='submit' value='Save'>
        </div>
    </form>
</div>'''



MAIN_JS = '''/* This function is used to make a GET request which in turn will make
the server open a new browser tab with one of the site files. This is to work around
the fact that in some browsers links to file:// URLs won't work when the current page
is a http(s):// one. In other words we can't just make an
<a href='file:///folder/index.html'> link; it won't work. */
function viewPost(id) {
    var URL = '/view-post';
    if (id) {
        URL += '?post_id=' + encodeURIComponent(id);
    }

    var request = new XMLHttpRequest();
    request.open('GET', URL);
    request.send();
}'''



EDIT_MENU_JS = u'''var menuItems = %(menu_item_list)s;



function moveArrayItem(array, from, to) {
    array.splice(to, 0, array.splice(from, 1)[0]);
}



function showMenuList() {
    var i, li, div, a;
    var menuItemOrder = [];
    var visibleMenuItems = [];
    var ul = document.getElementById('menu-items');
    var separator = ' ' + String.fromCharCode(8226) + ' '; // Bullet character.

    ul.innerHTML = '';

    for (i in menuItems) {
        li = document.createElement('li');

        if (menuItems[i].visible) {
            visibleMenuItems.push(menuItems[i].id);
        } else {
            li.className = 'hidden';
        }

        li.appendChild(document.createTextNode(menuItems[i].title));

        div = document.createElement('div');
        div.className = 'menu-actions';

        a = document.createElement('a');
        a.key = i;
        a.href = '';
        a.appendChild(document.createTextNode('move up' + separator));
        a.addEventListener('click', function(event) {
            var key = parseInt(this.key);
            moveArrayItem(menuItems, key, key == 0 ? menuItems.length - 1 : key - 1);
            showMenuList();

            event.preventDefault();
        });
        div.appendChild(a);

        a = document.createElement('a');
        a.key = i;
        a.href = '';
        a.appendChild(document.createTextNode('move down' + separator));
        a.addEventListener('click', function(event) {
            var key = parseInt(this.key);
            moveArrayItem(menuItems, key, key == menuItems.length - 1 ? 0 : key + 1);
            showMenuList();

            event.preventDefault();
        });
        div.appendChild(a);

        a = document.createElement('a');
        a.key = i;
        a.href = '';
        a.appendChild(document.createTextNode('hide/show'));
        a.addEventListener('click', function(event) {
            var key = parseInt(this.key);
            menuItems[key].visible = !menuItems[key].visible;
            showMenuList();

            event.preventDefault();
        });
        div.appendChild(a);

        li.appendChild(div);
        ul.appendChild(li);

        menuItemOrder.push(menuItems[i].id);
    }

    document.getElementById('menu-item-order').value = menuItemOrder.join();
    document.getElementById('visible-menu-items').value = visibleMenuItems.join();
}



if (menuItems.length) {
    showMenuList();
} else {
    document.getElementById('save-new-menu').style.display = 'none';
    document.getElementsByClassName('main')[0].appendChild(document.createTextNode('There are currently no pages.'));
}'''



EDIT_POST_JS = '''function slugify(string) {
    return string.trim().toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-');
}



// Auto-create slug:
if (document.getElementById('edit-post-id').value == 'new_post' || document.getElementById('edit-post-id').value == 'new_page') { // Only auto-fill slug on new posts/pages.
    document.getElementById('edit-title').addEventListener('input', function() {
        document.getElementById('edit-slug').value = slugify(this.value);
    });
}

// Select post:
document.getElementById('select-post-id').addEventListener('change', function() {
    document.getElementById("post-selection-form").submit();
});

// Filling in the WYSIWYG editor div:
document.getElementById('edit-body-wysiwyg').innerHTML = document.getElementById('edit-body-html').value;

// Enable WYSIWYG editing:
document.getElementById('toolbar-wysiwyg').addEventListener('click', function() {
    document.getElementById('edit-body-html').style.display = 'none';
    document.getElementById('edit-body-wysiwyg').style.display = 'block';
    document.getElementById('wysiwyg-toolbar').style.visibility = 'visible';
    document.getElementById('edit-body-wysiwyg').innerHTML = document.getElementById('edit-body-html').value;

    document.getElementById('toolbar-html').classList.remove('active');
    this.classList.add('active');
});

// Enable raw HTML editing:
document.getElementById('toolbar-html').addEventListener('click', function() {
    document.getElementById('edit-body-wysiwyg').style.display = 'none';
    document.getElementById('wysiwyg-toolbar').style.visibility = 'hidden';
    document.getElementById('edit-body-html').style.display = 'inline';

    document.getElementById('toolbar-wysiwyg').classList.remove('active');
    this.classList.add('active');
});

// Updating the raw HTML editing field when the user is using the WYSYWYG editor:
document.getElementById('edit-body-wysiwyg').addEventListener('input', function() {
    document.getElementById('edit-body-html').value = document.getElementById('edit-body-wysiwyg').innerHTML;
});

// Handling toolbar buttons:
var activateButtons = document.getElementsByClassName('activate');
for (var i = 0; i < activateButtons.length; i++) {
    activateButtons[i].addEventListener('mousedown', function(event) {
        var tag = this.dataset.tag; // E.g. "b" (bold).
        var selection = getSelection();
        var range = selection.getRangeAt(0);

        if (range.collapsed) {
            alert('Please select some text first.');
            event.preventDefault();
            return;
        }

        var newElement = document.createElement(tag);
        if (tag == 'a') {
            newElement.href = prompt('URL to link to:');
        }

        try {
            range.surroundContents(newElement); // Fails if the user has selected a non-text node.
        } catch (exception) {
        }

        document.getElementById('edit-body-html').value = document.getElementById('edit-body-wysiwyg').innerHTML;
        event.preventDefault();
    });
}

// Validate post form:
document.getElementById('post-editing-form').addEventListener('submit', function(event) {
    if (slugsOtherPosts.indexOf(document.getElementById('edit-slug').value) != -1) {
        alert('The selected slug is in use by another post/page.');
        event.preventDefault();
        return false;
    }

    return true;
});

// Confirm deletion:
document.getElementById('post-deletion-form').addEventListener('submit', function(event) {
    if (!confirm('Are you sure you want to delete this?')) {
        event.preventDefault();
        return false;
    }

    return true;
});'''



MAIN_CSS = '''* {
    box-sizing: border-box;
}
body {
    margin: 0;
    padding: 0;
    background: #f0f0f0;
    font: medium sans-serif;
}
h1 {
    margin: 0;
    font-size: x-large;
}
ul {
    margin: 0;
    padding: 0;
    list-style: none;
}
a {
    color: darkblue;
    text-decoration: none;
}
.nav {
    position: fixed;
    top: 75px;
    width: 162px;
}
.menu li:hover {
    background: #e0e0e0;
}
.menu li a {
    display: block;
    padding: 10px 20px;
    color: black;
}
.main-container {
    width: 1024px;
    margin: 0 auto;
}
.main {
    width: 700px;
    min-height: 300px;
    margin: 0 auto 5px auto;
    padding: 30px;
    border: 1px solid #e0e0e0;
    border-top: none;
    background: white;
}
footer {
    margin-bottom: 50px;
    color: gray;
    text-align: center;
    font-size: small;
    font-style: italic;
}
.message {
    margin-bottom: 20px;
    padding: 5px 10px;
    background: darkgreen;
    color: white;
    font-size: small;
}
footer a {
    color: inherit;
}
select, input, textarea {
    font: inherit;
}
input[type=text], textarea, .edit-body {
    width: 100%;
    padding: 8px;
    border: 1px solid silver;
}
#post-selection-form select {
    width: 100%;
}
input[type=number] {
    width: 60px;
}
.form-part {
    margin-bottom: 25px;
}
.edit-post {
    margin-bottom: 100px;
}
#edit-body-html {
    display: none;
    vertical-align: top;
}
.edit-body {
    height: 300px;
}
.info {
    color: gray;
    font-size: small;
}
.toolbar {
    overflow: auto;
    font-size: small;
}
.toolbar li {
    float: left;
    padding: 5px;
    cursor: pointer;
    border: 1px solid silver;
    border-right: none;
    border-bottom: none;
    color: gray;
}
.toolbar li:last-of-type {
    border-right: 1px solid silver;
}
.toolbar li:hover {
    background: #f5f5f5;
}
.toolbar li.active {
    color: black;
}
.input-mode {
    float: right;
}
#menu-items {
    margin: 50px auto;
}
#menu-items li {
    margin-bottom: 25px;
}
.menu-actions {
    margin-top: 2px;
    font-size: x-small;
}
.hidden {
    color: silver;
}
.settings {
    margin-top: 50px;
}
label {
    font-weight: bold;
    font-size: small;
}'''



class Site():
    ''' This class stores/retrieves/deletes site posts/pages from the database and file system.
    Use this class with the "with" statement (with Site() as site) to ensure a proper cleanup. '''



    def __init__(self):
        self._document_root = os.path.join(CONFIG['site_folder'], DOCUMENT_ROOT_FOLDER)
        self._template_location = os.path.join(CONFIG['site_folder'], 'template.html')
        self._template = DEFAULT_TEMPLATE
        self._db_location = os.path.join(CONFIG['site_folder'], 'site.db')

        # Creating the necessary folders and the template file:

        if not os.path.isdir(CONFIG['site_folder']):
            os.mkdir(CONFIG['site_folder'])
        if not os.path.isdir(self._document_root):
            os.mkdir(self._document_root)

        try:
            with codecs.open(self._template_location, 'r', 'UTF-8') as f:
                self._template = f.read()
        except:
            with codecs.open(self._template_location, 'w', 'UTF-8') as f:
                f.write(self._template)

        # With sqlite3.PARSE_DECLTYPES Python parses timestamp columns as datetime.datetime objects.
        self._db_connection = sqlite3.connect(self._db_location, detect_types=sqlite3.PARSE_DECLTYPES)
        self._db_connection.row_factory = sqlite3.Row
        self._db = self._db_connection.cursor()

        # Is the posts table present?
        if not self._db.execute('SELECT name FROM sqlite_master WHERE type = \'table\' AND name = \'posts\'').fetchone():
            self.insert_default_data()



    def __enter__(self):
        return self



    def insert_default_data(self):
        date = datetime.datetime.now()

        self._db.execute('''CREATE TABLE posts (
            id INTEGER NOT NULL PRIMARY KEY,
            type TEXT NOT NULL DEFAULT \'post\', /* 'post' or 'page'. */
            visible_in_menu INTEGER, /* Boolean - for pages only. */
            order_in_menu INTEGER, /* For pages only. */
            slug TEXT NOT NULL UNIQUE,
            title TEXT NOT NULL,
            date TIMESTAMP NOT NULL,
            body TEXT
        )''')
        self._db.executemany('INSERT INTO posts ( type, visible_in_menu, order_in_menu, slug, title, date, body ) VALUES ( ?, ?, ?, ?, ?, ?, ? )', [
            ('page', 1, 1, 'sample-page-1', 'Sample Page 1', date, 'You can edit or delete this page in the admin section.'),
            ('page', 1, 2, 'sample-page-2', 'Sample Page 2', date, 'You can edit or delete this page in the admin section.'),
            ('post', None, None, 'sample-blog-post', 'Sample Blog Post', date, 'You can edit or delete this blog post in the admin section.')
        ])



    def get_post_by_id(self, id):
        return self._db.execute('SELECT * FROM posts WHERE id = ?', (id, )).fetchone()



    def get_all_posts(self, include_post_bodies=False):
        ''' include_post_bodies is False by default in order to prevent excessive memory usage
        if there are a large number of posts/pages. '''
        query_parts = ['SELECT']
        if include_post_bodies:
            query_parts.append('*')
        else:
            query_parts.append('id, type, visible_in_menu, order_in_menu, slug, title, date')
        query_parts.append('FROM posts ORDER BY date DESC')

        return self._db.execute(' '.join(query_parts)).fetchall()



    def get_page_menu(self):
        return self._db.execute('SELECT id, visible_in_menu, order_in_menu, slug, title FROM posts WHERE type = \'page\' ORDER BY order_in_menu, date DESC').fetchall()



    def set_visible_in_menu(self, page_ids):
        self._db.execute('UPDATE posts SET visible_in_menu = 0')
        if page_ids:
            self._db.execute('UPDATE posts SET visible_in_menu = 1 WHERE id IN ( {} )'.format(', '.join('?' * len(page_ids))), page_ids)



    def set_order_in_menu(self, page_ids):
        ''' The IDs in page_ids should appear in the order that they should appear in the page menu. '''
        self._db.executemany('UPDATE posts SET order_in_menu = ? WHERE id = ?', [v for v in enumerate(page_ids)])



    def insert_post(self, type, slug, title, date, body):
        visible_in_menu = order_in_menu = None
        if type == 'page':
            visible_in_menu = 1
            order_in_menu = 0

        self._db.execute(
            'INSERT INTO posts ( type, visible_in_menu, order_in_menu, slug, title, date, body ) VALUES ( ?, ?, ?, ?, ?, ?, ? )',
            [type, visible_in_menu, order_in_menu, slug, title, date, body]
        )
        return self._db.lastrowid



    def update_post(self, id, slug, title, date, body):
        self._db.execute(
            'UPDATE posts SET slug = ?, title = ?, date = ?, body = ? WHERE id = ?',
            [slug, title, date, body, id]
        )



    def delete_post(self, post_id):
        post = self.get_post_by_id(post_id)
        if post:
            self._db.execute('DELETE FROM posts WHERE id = ?', (post_id, ))

            try:
                os.remove(os.path.join(self._document_root, '{}.html'.format(post['slug'])))
            except:
                pass



    def write_to_file_system(self):
        locale.setlocale(locale.LC_TIME, CONFIG['locale'].encode() if PYTHON_2 else CONFIG['locale'])

        page_menu_parts = []
        for v in self.get_page_menu():
            if v['visible_in_menu']:
                page_menu_parts.append(u'<li><a href=\'{}.html\'>{}</a></li>'.format(v['slug'], esc(v['title'])))

        standard_replacements = {
            '{{ site_name }}': esc(CONFIG['site_name']),
            '{{ generator_url }}': APP_HOME_PAGE,
            '{{ generator_name }}': esc(APP_NAME),
            '{{ page_menu }}': ''.join(page_menu_parts)
        }
        for k, v in standard_replacements.items():
            self._template = self._template.replace(k, v)

        try:
            before_post_loop, remaining_part = self._template.split('{{ post_loop_start }}')
            post_loop, after_post_loop = remaining_part.split('{{ post_loop_end }}')
        except:
            sys.exit('The template must contain {{ post_loop_start }} and {{ post_loop_end }}.')

        posts = self.get_all_posts(include_post_bodies=True)
        archive_parts = []
        front_page_parts = []
        post_counter = 0
        first_post_id_after_front_page = None
        for v in posts:
            this_post_loop = post_loop
            path = '{}.html'.format(v['slug'])

            replacements = {
                '{{ post_id }}': str(v['id']),
                '{{ post_url }}': path,
                '{{ post_title }}': esc(v['title']),
                '{{ post_date }}': esc(v['date'].strftime(CONFIG['date_format'])),
                '{{ post_body }}': v['body']
            }
            for key, value in replacements.items():
                this_post_loop = this_post_loop.replace(key, value)

            content = before_post_loop + this_post_loop + after_post_loop
            content = content.replace('{{ title }}', u'{} &bull; {}'.format(esc(v['title']), esc(CONFIG['site_name'])))
            content = content.replace('{{ archive_link }}', '')

            with codecs.open(os.path.join(self._document_root, path), 'w', 'UTF-8') as f:
                f.write(content)

            if v['type'] == 'post':
                archive_parts.append(this_post_loop)

                if post_counter < CONFIG['num_posts_front_page']:
                    front_page_parts.append(this_post_loop)
                elif not first_post_id_after_front_page:
                    first_post_id_after_front_page = v['id']

                post_counter += 1

        # Composing and writing the archive:

        archive = before_post_loop + ''.join(archive_parts) + after_post_loop
        archive = archive.replace('{{ title }}', esc(CONFIG['site_name']))
        archive = archive.replace('{{ archive_link }}', '')

        with codecs.open(os.path.join(self._document_root, 'archive.html'), 'w', 'UTF-8') as f:
            f.write(archive)

        # Composing and writing the front page:

        front_page = before_post_loop + ''.join(front_page_parts) + after_post_loop
        front_page = front_page.replace('{{ title }}', esc(CONFIG['site_name']))

        archive_link_replacement = ''
        if first_post_id_after_front_page:
            archive_link_replacement = u'<div class=\'view-more\'><a href=\'archive.html#post-{}\'>{}</a></div>'.format(first_post_id_after_front_page, CONFIG['archive_link_content'])
        front_page = front_page.replace('{{ archive_link }}', archive_link_replacement)

        with codecs.open(os.path.join(self._document_root, 'index.html'), 'w', 'UTF-8') as f:
            f.write(front_page)



    def __exit__(self, *args):
        self._db_connection.commit()
        self._db_connection.close()



class ServerRequestHandler(BaseHTTPRequestHandler):
    def _compose_page(self, main_block, message_key=None):
        messages = {'saved': 'Saved.', 'deleted': 'The item has been deleted.'}
        message = ''
        if message_key:
            message = '<div class=\'message\'>{}</div>'.format(messages[message_key])

        return LAYOUT_HTML.format(
            title=APP_NAME,
            home_page=APP_HOME_PAGE,
            message=message,
            main_block=main_block
        )



    def _flatten_query(self, query):
        ''' Converts the list values returned by parse_qs() (e.g. {'country': ['Denmark']}) to string values, e.g. {'country': 'Denmark'}. '''
        for k in query:
            query[k] = query[k][0].decode('UTF-8') if PYTHON_2 else query[k][0]
        return query



    def log_message(self, format, *args):
        ''' Prevent default log messages. '''
        return



    def do_GET(self):
        # Getting the path and query string from URLs such as "/?var1=xyz":
        url = urlparse(self.path)
        path = url.path
        query = self._flatten_query(parse_qs(url.query))

        # Response defaults:
        content_type = 'text/html'
        content = ''
        message_key = query.get('message_key')

        if path == '/': # Post creation/editing.
            new_post_selected = ''
            new_page_selected = ''
            view_link = ''
            title_value = ''
            slug_value = ''
            date_value = ''
            body_value = ''
            disabled = ' disabled'
            slugsOtherPosts = []

            post_id = query.get('post_id', 'new_post')
            if post_id == 'new_post':
                new_post_selected = ' selected'
            elif post_id == 'new_page':
                new_page_selected = ' selected'
            else:
                with Site() as site:
                    post = site.get_post_by_id(post_id)
                if not post:
                    self.send_error(404)
                    return

                post_id = post['id']
                view_link = '<a href=\'javascript:viewPost({});\'>View</a>'.format(post['id'])
                title_value = esc(post['title'])
                slug_value = esc(post['slug'])
                date_value = esc(post['date'].strftime(INTERNAL_DATE_FORMAT))
                body_value = esc(post['body'])
                disabled = ''

            with Site() as site:
                posts = site.get_all_posts()

            page_list_elements = []
            post_list_elements = []
            for v in posts:
                if v['id'] != post_id:
                    slugsOtherPosts.append(v['slug'])
                if v['type'] == 'post':
                    post_list_elements.append(u'<option value=\'{}\'{}>{}</option>'.format(v['id'], ' selected' if v['id'] == post_id else '', esc(v['title'])))
                if v['type'] == 'page':
                    page_list_elements.append(u'<option value=\'{}\'{}>{}</option>'.format(v['id'], ' selected' if v['id'] == post_id else '', esc(v['title'])))

            content = self._compose_page(INDEX_HTML.format(
                new_post_selected=new_post_selected,
                new_page_selected=new_page_selected,
                page_list=''.join(page_list_elements),
                post_list=''.join(post_list_elements),
                view_link=view_link,
                title_value=title_value,
                slug_value=slug_value,
                date_value=date_value,
                body_value=body_value,
                edit_post_id=post_id,
                csrf_token=CSRF_TOKEN,
                disabled=disabled,
                slugsOtherPosts=json.dumps(slugsOtherPosts)
            ), message_key=message_key)
        elif path == '/menu':
            content = self._compose_page(MENU_HTML.format(csrf_token=CSRF_TOKEN), message_key=message_key)
        elif path == '/settings':
            locale_options = [
                '<option{}>{}</option>'.format(' selected' if v == CONFIG['locale'] else '', esc(v))
                for v in sorted(set(locale.locale_alias.values()))
            ]
            content = self._compose_page(SETTINGS_HTML.format(
                site_folder_value=esc(CONFIG['site_folder']),
                site_name_value=esc(CONFIG['site_name']),
                num_posts_front_page=CONFIG['num_posts_front_page'],
                archive_link_content_value=esc(CONFIG['archive_link_content']),
                locale_list=''.join(locale_options),
                date_format_value=esc(CONFIG['date_format']),
                csrf_token=CSRF_TOKEN
            ), message_key=message_key)
        elif path == '/site_export.json':
            with Site() as site:
                posts = site.get_all_posts(include_post_bodies=True)

            for k, v in enumerate(posts):
                posts[k] = dict(posts[k])
                posts[k]['date'] = posts[k]['date'].strftime(INTERNAL_DATE_FORMAT)

            content_type = 'application/json'
            content = json.dumps({'content': posts}, indent=4, sort_keys=True)
        elif path == '/main.css':
            content_type = 'text/css'
            content = MAIN_CSS
        elif path == '/main.js':
            content_type = 'text/javascript'
            content = MAIN_JS
        elif path == '/edit_post.js':
            content_type = 'text/javascript'
            content = EDIT_POST_JS
        elif path == '/edit_menu.js':
            with Site() as site:
                menu_items = [
                    {'id': v['id'], 'visible': v['visible_in_menu'], 'title': v['title']}
                    for v in site.get_page_menu()
                ]

            content_type = 'text/javascript'
            # Using %-style formatting here because JS contains brackets which are interpreted as specifiers by format():
            content = EDIT_MENU_JS % {'menu_item_list': json.dumps(menu_items)}
        elif path == '/view-post': # See MAIN_JS for more info.
            file_name = 'index.html'
            post_id = query.get('post_id')
            if post_id:
                with Site() as site:
                    post = site.get_post_by_id(post_id)
                    if post:
                        file_name = '{}.html'.format(post['slug'])

            webbrowser.open_new_tab('file://{}'.format(os.path.join(CONFIG['site_folder'], DOCUMENT_ROOT_FOLDER, file_name)))
        else:
            self.send_error(404)
            return

        self.send_response(200)
        self.send_header('Content-Type', '{}; charset=UTF-8'.format(content_type))
        self.end_headers()

        if PYTHON_2:
            content = content.encode('UTF-8')
        else:
            content = bytes(content, 'UTF-8')
        self.wfile.write(content)



    def do_POST(self):
        if 'content-length' not in self.headers:
            self.send_error(411)
            return

        content_length = int(self.headers['content-length'])
        data = self.rfile.read(content_length)
        if not PYTHON_2:
            data = data.decode() # In Python 3 this variable will contain bytes. Converting it to a string.
        data = self._flatten_query(parse_qs(data))

        if data.get('csrf_token') != CSRF_TOKEN:
            self.send_error(403)
            return

        if self.path == '/edit-post':
            default_slug = uuid.uuid4().hex # Only used in those rare cases when the user enters an invalid slug.
            default_date = datetime.datetime.now().strftime(INTERNAL_DATE_FORMAT)

            ''' The reason we're doing some_dict.get('key') or 'default_value' instead of some_dict.get('key', 'default_value')
            is that this way we also assign a default value if the value of some_dict.get('key') is an empty string. '''
            post_id = data.get('post_id') or 'new_post'
            title = data.get('title') or '[No title]'
            slug = data.get('slug') or default_slug
            date = data.get('date') or default_date
            body = data.get('body', '')

            with Site() as site:
                slugs = [v['slug'] for v in site.get_all_posts()]

                if post_id not in ['new_post', 'new_page']:
                    post = site.get_post_by_id(post_id)
                    if not post:
                        self.send_error(404)
                        return
                    slugs.remove(post['slug'])

                if slug in slugs or not re.match('[\w-]+$', slug):
                    slug = default_slug
                if not re.match('\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$', date): # E.g. "2015-10-15 22:10:08".
                    date = default_date

                date = datetime.datetime.strptime(date, INTERNAL_DATE_FORMAT)

                if post_id in ['new_post', 'new_page']:
                    post_id = site.insert_post('post' if post_id == 'new_post' else 'page', slug, title, date, body)
                else:
                    site.update_post(post_id, slug, title, date, body)
                site.write_to_file_system()

            redirect_to = '/?post_id={}&message_key=saved'.format(quote_plus(str(post_id)))
        elif self.path == '/delete-post':
            post_id = data.get('post_id')
            if post_id:
                with Site() as site:
                    site.delete_post(post_id)
                    site.write_to_file_system()

            redirect_to = '/?message_key=deleted'
        elif self.path == '/edit-menu':
            visible_menu_items = data.get('visible_menu_items', '').strip()
            menu_item_order = data.get('menu_item_order', '').strip()

            with Site() as site:
                site.set_visible_in_menu(visible_menu_items.split(','))
                site.set_order_in_menu(menu_item_order.split(','))
                site.write_to_file_system()

            redirect_to = '/menu?message_key=saved'
        elif self.path == '/edit-settings':
            CONFIG['site_folder'] = data.get('site_folder', DEFAULTS['site_folder']).strip()
            CONFIG['site_name'] = data.get('site_name', DEFAULTS['site_name']).strip()
            CONFIG['num_posts_front_page'] = int(data.get('num_posts_front_page', DEFAULTS['num_posts_front_page']))
            CONFIG['archive_link_content'] = data.get('archive_link_content', DEFAULTS['archive_link_content']).strip()
            CONFIG['locale'] = data.get('locale', DEFAULTS['locale'])
            CONFIG['date_format'] = data.get('date_format', DEFAULTS['date_format']).strip()

            with codecs.open(CONFIG_FILE, 'w', 'UTF-8') as f:
                json.dump(CONFIG, f)

            with Site() as site:
                site.write_to_file_system()

            redirect_to = '/settings?message_key=saved'
        else:
            self.send_error(404)
            return

        self.send_response(302)
        self.send_header('Location', 'http://localhost:{}{}'.format(PORT, redirect_to))
        self.end_headers()



if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        sys.exit('usage: {}'.format(os.path.basename(__file__)))



    # Reading the config file if it exists; otherwise create it.
    try:
        with codecs.open(CONFIG_FILE, 'r', 'UTF-8') as f:
            CONFIG = json.load(f)
    except:
        with codecs.open(CONFIG_FILE, 'w', 'UTF-8') as f:
            json.dump(CONFIG, f)

    # Generating the necessary files if they don't exist:
    with Site() as site:
        site.write_to_file_system()

    try:
        server = HTTPServer(('', PORT), ServerRequestHandler)
        url = 'http://localhost:{}/'.format(PORT)

        webbrowser.open_new_tab(url)

        print('The web server is running on {}'.format(url))
        print('Press Ctrl + C to stop the server.')

        server.serve_forever()
    except KeyboardInterrupt:
        pass

    server.server_close()